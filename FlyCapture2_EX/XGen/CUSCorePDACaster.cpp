/*******************************************************************************
' CUSCorePDACaster.c
'
' Copyright (c) 2004 by Miracom,Inc.
' All rights reserved.
'
' Generated by XGen 4.0
'
' Created at Wed Apr 16 11:36:50 KST 2008
'
' Author : Miracom
' Description : Generated by XGen4.3.0.3
'******************************************************************************/

//#ifdef _AFXDLL
#include "..\\StdAfx.h"
//#endif
#include "CUSCorePDACaster.h"
//#include "include/CUSCorePDACaster.h"

IOIStatus send_CUS_Update_PDA_Silsa_Input(CUS_Update_PDA_Silsa_input_In_Tag *CUS_Update_PDA_Silsa_input_In, PDA_Cmn_Out_Tag *PDA_Cmn_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_Update_PDA_Silsa_Input")), _T("CUS_Update_PDA_Silsa_Input"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_Update_PDA_Silsa_input_In_Tag(former, CUS_Update_PDA_Silsa_input_In);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_PDA_Cmn_Out_Tag(former, PDA_Cmn_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUS_Update_PDA_Direct_Packing_Label(CUS_Update_PDA_Direct_Packing_Label_In_Tag *CUS_Update_PDA_Direct_Packing_Label_In, PDA_Cmn_Out_Tag *PDA_Cmn_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_Update_PDA_Direct_Packing_Label")), _T("CUS_Update_PDA_Direct_Packing_Label"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_Update_PDA_Direct_Packing_Label_In_Tag(former, CUS_Update_PDA_Direct_Packing_Label_In);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_PDA_Cmn_Out_Tag(former, PDA_Cmn_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUS_Update_PDA_Optics_Mat_Output(CUS_Update_PDA_Optics_Mat_Output_in_Tag *CUS_Update_PDA_Optics_Mat_Output_in, PDA_Cmn_Out_Tag *PDA_Cmn_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_Update_PDA_Optics_Mat_Output")), _T("CUS_Update_PDA_Optics_Mat_Output"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_Update_PDA_Optics_Mat_Output_in_Tag(former, CUS_Update_PDA_Optics_Mat_Output_in);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_PDA_Cmn_Out_Tag(former, PDA_Cmn_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUS_Update_PDA_Tran_Out_Stock(CUS_Update_PDA_Tran_Out_Stock_in_Tag *CUS_Update_PDA_Tran_Out_Stock_in, PDA_Cmn_Out_Tag *PDA_Cmn_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_Update_PDA_Tran_Out_Stock")), _T("CUS_Update_PDA_Tran_Out_Stock"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_Update_PDA_Tran_Out_Stock_in_Tag(former, CUS_Update_PDA_Tran_Out_Stock_in);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_PDA_Cmn_Out_Tag(former, PDA_Cmn_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUS_View_PDA_Ship_LDP_Label(CUS_View_PDA_Ship_LDP_Label_In_Tag *CUS_View_PDA_Ship_LDP_Label_In, CUS_View_PDA_Ship_LDP_Label_Out_Tag *CUS_View_PDA_Ship_LDP_Label_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_View_PDA_Ship_LDP_Label")), _T("CUS_View_PDA_Ship_LDP_Label"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_View_PDA_Ship_LDP_Label_In_Tag(former, CUS_View_PDA_Ship_LDP_Label_In);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_CUS_View_PDA_Ship_LDP_Label_Out_Tag(former, CUS_View_PDA_Ship_LDP_Label_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUS_View_PDA_GCM_Table_List(CUS_View_PDA_GCM_Table_In_Tag *CUS_View_PDA_GCM_Table_In, CUS_View_PDA_GCM_Table_Out_Tag *CUS_View_PDA_GCM_Table_Out, LPTSTR channel, int ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCorePDA")), _T("CUSCorePDA"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUS_View_PDA_GCM_Table_List")), _T("CUS_View_PDA_GCM_Table_List"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUS_View_PDA_GCM_Table_In_Tag(former, CUS_View_PDA_GCM_Table_In);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep)) /* Just RequestReply */
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_CUS_View_PDA_GCM_Table_Out_Tag(former, CUS_View_PDA_GCM_Table_Out);
            }
                DestroyTransformer(former);
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

