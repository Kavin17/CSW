/*******************************************************************************
' CUSCorePDAType.c
'
' Copyright (c) 2004 by Miracom,Inc.
' All rights reserved.
'
' Generated by XGen 4.0
'
' Created at Wed Apr 16 11:36:50 KST 2008
'
' Author : Miracom
' Description : Generated by XGen4.3.0.3
'******************************************************************************/

//#ifdef _AFXDLL
#include "..\\StdAfx.h"
//#endif
#include "CUSCorePDAType.h"
//#include "include/CUSCorePDAType.h"


void serialize_PDA_Cmn_In_Tag(HTransformer former, PDA_Cmn_In_Tag *source)
{
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
}

void serialize_PDA_Cmn_Out_Tag(HTransformer former, PDA_Cmn_Out_Tag *source)
{
    WriteMsgChar(former, source->h_status_value);
    WriteMsgSizedString(former, source->h_msg_code, get_last_space_pos(source->h_msg_code, 10));
    WriteMsgSizedString(former, source->h_msg, get_last_space_pos(source->h_msg, 200));
    WriteMsgSizedString(former, source->h_field_msg, get_last_space_pos(source->h_field_msg, 200));
    WriteMsgSizedString(former, source->h_db_err_msg, get_last_space_pos(source->h_db_err_msg, 200));
}

void serialize_CUS_Update_PDA_Silsa_input_In_Tag_pda_list(HTransformer former, CUS_Update_PDA_Silsa_input_In_Tag_pda_list *source)
{
    WriteMsgSizedString(former, source->outbox_no, get_last_space_pos(source->outbox_no, 20));
    WriteMsgSizedString(former, source->mat_id, get_last_space_pos(source->mat_id, 20));
    WriteMsgDouble(former, source->qty_1);
}

void serialize_CUS_Update_PDA_Silsa_input_In_Tag(HTransformer former, CUS_Update_PDA_Silsa_input_In_Tag *source)
{
    int i = 0;
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->work_date, get_last_space_pos(source->work_date, 14));
    WriteMsgSizedString(former, source->mat_id, get_last_space_pos(source->mat_id, 20));
    WriteMsgSizedString(former, source->mat_desc, get_last_space_pos(source->mat_desc, 50));
    WriteMsgSizedString(former, source->lot_id, get_last_space_pos(source->lot_id, 20));
    WriteMsgDouble(former, source->ins_qty);
    WriteMsgDouble(former, source->inv_qty);
    WriteMsgSizedString(former, source->create_user_id, get_last_space_pos(source->create_user_id, 20));
    WriteMsgSizedString(former, source->create_time, get_last_space_pos(source->create_time, 14));
    WriteMsgSizedString(former, source->update_user_id, get_last_space_pos(source->update_user_id, 20));
    WriteMsgSizedString(former, source->update_time, get_last_space_pos(source->update_time, 14));
    WriteMsgSizedString(former, source->shp_cmf_1, get_last_space_pos(source->shp_cmf_1, 30));
    WriteMsgSizedString(former, source->shp_cmf_2, get_last_space_pos(source->shp_cmf_2, 30));
    WriteMsgSizedString(former, source->shp_cmf_3, get_last_space_pos(source->shp_cmf_3, 30));
    WriteMsgSizedString(former, source->shp_cmf_4, get_last_space_pos(source->shp_cmf_4, 30));
    WriteMsgSizedString(former, source->shp_cmf_5, get_last_space_pos(source->shp_cmf_5, 30));
    WriteMsgSizedString(former, source->shp_cmf_6, get_last_space_pos(source->shp_cmf_6, 30));
    WriteMsgSizedString(former, source->shp_cmf_7, get_last_space_pos(source->shp_cmf_7, 30));
    WriteMsgSizedString(former, source->shp_cmf_8, get_last_space_pos(source->shp_cmf_8, 30));
    WriteMsgSizedString(former, source->shp_cmf_9, get_last_space_pos(source->shp_cmf_9, 30));
    WriteMsgSizedString(former, source->shp_cmf_10, get_last_space_pos(source->shp_cmf_10, 30));
    source->_size_pda_list = (100 >= source->_size_pda_list ? source->_size_pda_list : 100);
    WriteMsgInt(former, source->_size_pda_list);
    for(i = 0; i < source->_size_pda_list; i++) {
        serialize_CUS_Update_PDA_Silsa_input_In_Tag_pda_list(former, &source->pda_list[i]);
    }
}

void serialize_CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list(HTransformer former, CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list *source)
{
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
}

void serialize_CUS_Update_PDA_Direct_Packing_Label_In_Tag(HTransformer former, CUS_Update_PDA_Direct_Packing_Label_In_Tag *source)
{
    int i = 0;
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->work_date, get_last_space_pos(source->work_date, 8));
    WriteMsgSizedString(former, source->prod_date, get_last_space_pos(source->prod_date, 14));
    WriteMsgSizedString(former, source->inbox_no, get_last_space_pos(source->inbox_no, 30));
    WriteMsgDouble(former, source->inbox_seq);
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
    WriteMsgSizedString(former, source->label_id, get_last_space_pos(source->label_id, 25));
    WriteMsgSizedString(former, source->prod_name, get_last_space_pos(source->prod_name, 50));
    WriteMsgSizedString(former, source->mat_id, get_last_space_pos(source->mat_id, 30));
    WriteMsgSizedString(former, source->mat_desc, get_last_space_pos(source->mat_desc, 50));
    WriteMsgSizedString(former, source->mat_type, get_last_space_pos(source->mat_type, 20));
    WriteMsgSizedString(former, source->pol_type, get_last_space_pos(source->pol_type, 30));
    WriteMsgSizedString(former, source->lot_id, get_last_space_pos(source->lot_id, 25));
    WriteMsgSizedString(former, source->cust_mat_id, get_last_space_pos(source->cust_mat_id, 30));
    WriteMsgSizedString(former, source->cust_mat_desc, get_last_space_pos(source->cust_mat_desc, 50));
    WriteMsgSizedString(former, source->mat_size, get_last_space_pos(source->mat_size, 20));
    WriteMsgDouble(former, source->pack_qty);
    WriteMsgSizedString(former, source->order_no, get_last_space_pos(source->order_no, 25));
    WriteMsgSizedString(former, source->print_time, get_last_space_pos(source->print_time, 14));
    WriteMsgDouble(former, source->tot_qty);
    WriteMsgChar(former, source->side_flag);
    WriteMsgDouble(former, source->print_cnt);
    WriteMsgChar(former, source->residue_fg);
    WriteMsgDouble(former, source->residue_qty);
    WriteMsgChar(former, source->add_fg);
    WriteMsgSizedString(former, source->from_to_inbox_no, get_last_space_pos(source->from_to_inbox_no, 30));
    WriteMsgChar(former, source->delete_fg);
    WriteMsgSizedString(former, source->create_user_id, get_last_space_pos(source->create_user_id, 20));
    WriteMsgSizedString(former, source->create_time, get_last_space_pos(source->create_time, 14));
    WriteMsgSizedString(former, source->update_user_id, get_last_space_pos(source->update_user_id, 20));
    WriteMsgSizedString(former, source->update_time, get_last_space_pos(source->update_time, 14));
    WriteMsgSizedString(former, source->lbl_cmf_1, get_last_space_pos(source->lbl_cmf_1, 30));
    WriteMsgSizedString(former, source->lbl_cmf_2, get_last_space_pos(source->lbl_cmf_2, 30));
    WriteMsgSizedString(former, source->lbl_cmf_3, get_last_space_pos(source->lbl_cmf_3, 30));
    WriteMsgSizedString(former, source->lbl_cmf_4, get_last_space_pos(source->lbl_cmf_4, 30));
    WriteMsgSizedString(former, source->lbl_cmf_5, get_last_space_pos(source->lbl_cmf_5, 30));
    WriteMsgSizedString(former, source->lbl_cmf_6, get_last_space_pos(source->lbl_cmf_6, 30));
    WriteMsgSizedString(former, source->lbl_cmf_7, get_last_space_pos(source->lbl_cmf_7, 30));
    WriteMsgSizedString(former, source->lbl_cmf_8, get_last_space_pos(source->lbl_cmf_8, 30));
    WriteMsgSizedString(former, source->lbl_cmf_9, get_last_space_pos(source->lbl_cmf_9, 30));
    WriteMsgSizedString(former, source->lbl_cmf_10, get_last_space_pos(source->lbl_cmf_10, 30));
    source->_size_pda_list = (100 >= source->_size_pda_list ? source->_size_pda_list : 100);
    WriteMsgInt(former, source->_size_pda_list);
    for(i = 0; i < source->_size_pda_list; i++) {
        serialize_CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list(former, &source->pda_list[i]);
    }
}

void serialize_CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list(HTransformer former, CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list *source)
{
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
}

void serialize_CUS_Update_PDA_Optics_Mat_Output_in_Tag(HTransformer former, CUS_Update_PDA_Optics_Mat_Output_in_Tag *source)
{
    int i = 0;
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->work_date, get_last_space_pos(source->work_date, 8));
    WriteMsgSizedString(former, source->prod_date, get_last_space_pos(source->prod_date, 14));
    WriteMsgSizedString(former, source->outbox_no, get_last_space_pos(source->outbox_no, 30));
    WriteMsgDouble(former, source->outbox_seq);
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
    WriteMsgSizedString(former, source->label_id, get_last_space_pos(source->label_id, 25));
    WriteMsgSizedString(former, source->prod_name, get_last_space_pos(source->prod_name, 50));
    WriteMsgSizedString(former, source->mat_id, get_last_space_pos(source->mat_id, 30));
    WriteMsgSizedString(former, source->mat_desc, get_last_space_pos(source->mat_desc, 50));
    WriteMsgSizedString(former, source->mat_type, get_last_space_pos(source->mat_type, 20));
    WriteMsgSizedString(former, source->pol_type, get_last_space_pos(source->pol_type, 30));
    WriteMsgSizedString(former, source->lot_id, get_last_space_pos(source->lot_id, 25));
    WriteMsgSizedString(former, source->inbox_no, get_last_space_pos(source->inbox_no, 30));
    WriteMsgSizedString(former, source->customer_id, get_last_space_pos(source->customer_id, 25));
    WriteMsgSizedString(former, source->customer_desc, get_last_space_pos(source->customer_desc, 25));
    WriteMsgSizedString(former, source->cust_mat_id, get_last_space_pos(source->cust_mat_id, 20));
    WriteMsgSizedString(former, source->cust_mat_desc, get_last_space_pos(source->cust_mat_desc, 50));
    WriteMsgSizedString(former, source->mat_size, get_last_space_pos(source->mat_size, 20));
    WriteMsgDouble(former, source->pack_qty);
    WriteMsgSizedString(former, source->avail_time, get_last_space_pos(source->avail_time, 14));
    WriteMsgSizedString(former, source->order_no, get_last_space_pos(source->order_no, 25));
    WriteMsgSizedString(former, source->print_time, get_last_space_pos(source->print_time, 14));
    WriteMsgDouble(former, source->tot_qty);
    WriteMsgDouble(former, source->print_cnt);
    WriteMsgChar(former, source->residue_fg);
    WriteMsgDouble(former, source->residue_qty);
    WriteMsgChar(former, source->add_fg);
    WriteMsgChar(former, source->ship_fg);
    WriteMsgSizedString(former, source->ship_time, get_last_space_pos(source->ship_time, 14));
    WriteMsgSizedString(former, source->from_to_outbox_no, get_last_space_pos(source->from_to_outbox_no, 30));
    WriteMsgChar(former, source->delete_fg);
    WriteMsgSizedString(former, source->create_user_id, get_last_space_pos(source->create_user_id, 20));
    WriteMsgSizedString(former, source->create_time, get_last_space_pos(source->create_time, 14));
    WriteMsgSizedString(former, source->update_user_id, get_last_space_pos(source->update_user_id, 20));
    WriteMsgSizedString(former, source->update_time, get_last_space_pos(source->update_time, 14));
    WriteMsgSizedString(former, source->lot_id_1, get_last_space_pos(source->lot_id_1, 25));
    WriteMsgSizedString(former, source->lot_id_2, get_last_space_pos(source->lot_id_2, 25));
    WriteMsgSizedString(former, source->lot_id_3, get_last_space_pos(source->lot_id_3, 25));
    WriteMsgSizedString(former, source->pol_type_1, get_last_space_pos(source->pol_type_1, 30));
    WriteMsgSizedString(former, source->pol_type_2, get_last_space_pos(source->pol_type_2, 30));
    WriteMsgSizedString(former, source->pol_type_3, get_last_space_pos(source->pol_type_3, 30));
    WriteMsgSizedString(former, source->pol_type_4, get_last_space_pos(source->pol_type_4, 30));
    WriteMsgSizedString(former, source->lbl_cmf_1, get_last_space_pos(source->lbl_cmf_1, 30));
    WriteMsgSizedString(former, source->lbl_cmf_2, get_last_space_pos(source->lbl_cmf_2, 30));
    WriteMsgSizedString(former, source->lbl_cmf_3, get_last_space_pos(source->lbl_cmf_3, 30));
    WriteMsgSizedString(former, source->lbl_cmf_4, get_last_space_pos(source->lbl_cmf_4, 30));
    WriteMsgSizedString(former, source->lbl_cmf_5, get_last_space_pos(source->lbl_cmf_5, 30));
    WriteMsgSizedString(former, source->lbl_cmf_6, get_last_space_pos(source->lbl_cmf_6, 30));
    WriteMsgSizedString(former, source->lbl_cmf_7, get_last_space_pos(source->lbl_cmf_7, 30));
    WriteMsgSizedString(former, source->lbl_cmf_8, get_last_space_pos(source->lbl_cmf_8, 30));
    WriteMsgSizedString(former, source->lbl_cmf_9, get_last_space_pos(source->lbl_cmf_9, 30));
    WriteMsgSizedString(former, source->lbl_cmf_10, get_last_space_pos(source->lbl_cmf_10, 30));
    source->_size_pda_list = (100 >= source->_size_pda_list ? source->_size_pda_list : 100);
    WriteMsgInt(former, source->_size_pda_list);
    for(i = 0; i < source->_size_pda_list; i++) {
        serialize_CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list(former, &source->pda_list[i]);
    }
}

void serialize_CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list(HTransformer former, CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list *source)
{
    WriteMsgSizedString(former, source->lot_id, get_last_space_pos(source->lot_id, 25));
    WriteMsgSizedString(former, source->Carraier_id, get_last_space_pos(source->Carraier_id, 25));
}

void serialize_CUS_Update_PDA_Tran_Out_Stock_in_Tag(HTransformer former, CUS_Update_PDA_Tran_Out_Stock_in_Tag *source)
{
    int i = 0;
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgInt(former, source->count);
    WriteMsgSizedString(former, source->oper, get_last_space_pos(source->oper, 10));
    WriteMsgSizedString(former, source->lot_cmf_1, get_last_space_pos(source->lot_cmf_1, 30));
    WriteMsgSizedString(former, source->lot_cmf_2, get_last_space_pos(source->lot_cmf_2, 30));
    WriteMsgSizedString(former, source->lot_cmf_3, get_last_space_pos(source->lot_cmf_3, 30));
    WriteMsgSizedString(former, source->lot_cmf_4, get_last_space_pos(source->lot_cmf_4, 30));
    WriteMsgSizedString(former, source->lot_cmf_5, get_last_space_pos(source->lot_cmf_5, 30));
    WriteMsgSizedString(former, source->lot_cmf_6, get_last_space_pos(source->lot_cmf_6, 30));
    WriteMsgSizedString(former, source->lot_cmf_7, get_last_space_pos(source->lot_cmf_7, 30));
    WriteMsgSizedString(former, source->lot_cmf_8, get_last_space_pos(source->lot_cmf_8, 30));
    WriteMsgSizedString(former, source->lot_cmf_9, get_last_space_pos(source->lot_cmf_9, 30));
    WriteMsgSizedString(former, source->lot_cmf_10, get_last_space_pos(source->lot_cmf_10, 30));
    source->_size_lot_list = (100 >= source->_size_lot_list ? source->_size_lot_list : 100);
    WriteMsgInt(former, source->_size_lot_list);
    for(i = 0; i < source->_size_lot_list; i++) {
        serialize_CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list(former, &source->lot_list[i]);
    }
}

void serialize_CUS_View_PDA_Ship_LDP_Label_In_Tag(HTransformer former, CUS_View_PDA_Ship_LDP_Label_In_Tag *source)
{
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
}

void serialize_CUS_View_PDA_Ship_LDP_Label_Out_Tag(HTransformer former, CUS_View_PDA_Ship_LDP_Label_Out_Tag *source)
{
    WriteMsgChar(former, source->h_status_value);
    WriteMsgSizedString(former, source->h_msg_code, get_last_space_pos(source->h_msg_code, 10));
    WriteMsgSizedString(former, source->h_msg, get_last_space_pos(source->h_msg, 200));
    WriteMsgSizedString(former, source->h_field_msg, get_last_space_pos(source->h_field_msg, 200));
    WriteMsgSizedString(former, source->h_db_err_msg, get_last_space_pos(source->h_db_err_msg, 200));
    WriteMsgInt(former, source->count);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->customer_id, get_last_space_pos(source->customer_id, 30));
    WriteMsgSizedString(former, source->barcode, get_last_space_pos(source->barcode, 30));
    WriteMsgSizedString(former, source->dw_code, get_last_space_pos(source->dw_code, 30));
    WriteMsgInt(former, source->barcode_seq);
    WriteMsgSizedString(former, source->cust_model_id, get_last_space_pos(source->cust_model_id, 30));
    WriteMsgSizedString(former, source->lot_id, get_last_space_pos(source->lot_id, 25));
    WriteMsgInt(former, source->pack_qty);
    WriteMsgSizedString(former, source->cust_mat_code, get_last_space_pos(source->cust_mat_code, 30));
    WriteMsgSizedString(former, source->sap_mat_code, get_last_space_pos(source->sap_mat_code, 30));
    WriteMsgSizedString(former, source->vendor_mat_id, get_last_space_pos(source->vendor_mat_id, 50));
    WriteMsgInt(former, source->lot_qty);
    WriteMsgSizedString(former, source->prod_time, get_last_space_pos(source->prod_time, 14));
    WriteMsgSizedString(former, source->print_user_id, get_last_space_pos(source->print_user_id, 20));
    WriteMsgSizedString(former, source->print_time, get_last_space_pos(source->print_time, 14));
    WriteMsgSizedString(former, source->lbl_cmf_1, get_last_space_pos(source->lbl_cmf_1, 30));
    WriteMsgSizedString(former, source->lbl_cmf_2, get_last_space_pos(source->lbl_cmf_2, 30));
    WriteMsgSizedString(former, source->lbl_cmf_3, get_last_space_pos(source->lbl_cmf_3, 30));
    WriteMsgSizedString(former, source->lbl_cmf_4, get_last_space_pos(source->lbl_cmf_4, 30));
    WriteMsgSizedString(former, source->lbl_cmf_5, get_last_space_pos(source->lbl_cmf_5, 30));
    WriteMsgSizedString(former, source->lbl_cmf_6, get_last_space_pos(source->lbl_cmf_6, 30));
    WriteMsgSizedString(former, source->lbl_cmf_7, get_last_space_pos(source->lbl_cmf_7, 30));
    WriteMsgSizedString(former, source->lbl_cmf_8, get_last_space_pos(source->lbl_cmf_8, 30));
    WriteMsgSizedString(former, source->lbl_cmf_9, get_last_space_pos(source->lbl_cmf_9, 30));
    WriteMsgSizedString(former, source->lbl_cmf_10, get_last_space_pos(source->lbl_cmf_10, 30));
}

void serialize_CUS_View_PDA_GCM_Table_In_Tag(HTransformer former, CUS_View_PDA_GCM_Table_In_Tag *source)
{
    WriteMsgSizedString(former, source->h_passport, get_last_space_pos(source->h_passport, 100));
    WriteMsgChar(former, source->h_language);
    WriteMsgSizedString(former, source->h_factory, get_last_space_pos(source->h_factory, 10));
    WriteMsgSizedString(former, source->h_user_id, get_last_space_pos(source->h_user_id, 20));
    WriteMsgSizedString(former, source->h_password, get_last_space_pos(source->h_password, 20));
    WriteMsgChar(former, source->h_proc_step);
    WriteMsgSizedString(former, source->factory, get_last_space_pos(source->factory, 10));
    WriteMsgSizedString(former, source->table_name, get_last_space_pos(source->table_name, 20));
    WriteMsgSizedString(former, source->key_1, get_last_space_pos(source->key_1, 30));
    WriteMsgSizedString(former, source->key_2, get_last_space_pos(source->key_2, 30));
    WriteMsgSizedString(former, source->next_key_1, get_last_space_pos(source->next_key_1, 30));
    WriteMsgSizedString(former, source->next_key_2, get_last_space_pos(source->next_key_2, 30));
    WriteMsgSizedString(former, source->next_data_1, get_last_space_pos(source->next_data_1, 50));
}

void serialize_CUS_View_PDA_GCM_Table_Out_Tag_data_list(HTransformer former, CUS_View_PDA_GCM_Table_Out_Tag_data_list *source)
{
    WriteMsgSizedString(former, source->key_1, get_last_space_pos(source->key_1, 30));
    WriteMsgSizedString(former, source->key_2, get_last_space_pos(source->key_2, 30));
    WriteMsgSizedString(former, source->data_1, get_last_space_pos(source->data_1, 50));
    WriteMsgSizedString(former, source->data_2, get_last_space_pos(source->data_2, 50));
    WriteMsgSizedString(former, source->data_3, get_last_space_pos(source->data_3, 50));
    WriteMsgSizedString(former, source->data_4, get_last_space_pos(source->data_4, 50));
    WriteMsgSizedString(former, source->data_5, get_last_space_pos(source->data_5, 50));
    WriteMsgSizedString(former, source->data_6, get_last_space_pos(source->data_6, 50));
    WriteMsgSizedString(former, source->data_7, get_last_space_pos(source->data_7, 50));
    WriteMsgSizedString(former, source->data_8, get_last_space_pos(source->data_8, 50));
    WriteMsgSizedString(former, source->data_9, get_last_space_pos(source->data_9, 50));
    WriteMsgSizedString(former, source->data_10, get_last_space_pos(source->data_10, 50));
}

void serialize_CUS_View_PDA_GCM_Table_Out_Tag(HTransformer former, CUS_View_PDA_GCM_Table_Out_Tag *source)
{
    int i = 0;
    WriteMsgChar(former, source->h_status_value);
    WriteMsgSizedString(former, source->h_msg_code, get_last_space_pos(source->h_msg_code, 10));
    WriteMsgSizedString(former, source->h_msg, get_last_space_pos(source->h_msg, 200));
    WriteMsgSizedString(former, source->h_field_msg, get_last_space_pos(source->h_field_msg, 200));
    WriteMsgSizedString(former, source->h_db_err_msg, get_last_space_pos(source->h_db_err_msg, 200));
    WriteMsgInt(former, source->count);
    WriteMsgSizedString(former, source->next_key_1, get_last_space_pos(source->next_key_1, 30));
    WriteMsgSizedString(former, source->next_key_2, get_last_space_pos(source->next_key_2, 30));
    WriteMsgSizedString(former, source->next_data_1, get_last_space_pos(source->next_data_1, 50));
    source->_size_data_list = (100 >= source->_size_data_list ? source->_size_data_list : 100);
    WriteMsgInt(former, source->_size_data_list);
    for(i = 0; i < source->_size_data_list; i++) {
        serialize_CUS_View_PDA_GCM_Table_Out_Tag_data_list(former, &source->data_list[i]);
    }
}


void transform_PDA_Cmn_In_Tag(HTransformer former, PDA_Cmn_In_Tag *target)
{
    memset(target, 0x00, sizeof(PDA_Cmn_In_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
}

void transform_PDA_Cmn_Out_Tag(HTransformer former, PDA_Cmn_Out_Tag *target)
{
    memset(target, 0x00, sizeof(PDA_Cmn_Out_Tag));
    target->h_status_value = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_msg_code, 10, ' ');
    ReadMsgStringPadding(former, target->h_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_field_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_db_err_msg, 200, ' ');
}

void transform_CUS_Update_PDA_Silsa_input_In_Tag_pda_list(HTransformer former, CUS_Update_PDA_Silsa_input_In_Tag_pda_list *target)
{
    memset(target, 0x00, sizeof(CUS_Update_PDA_Silsa_input_In_Tag_pda_list));
    ReadMsgStringPadding(former, target->outbox_no, 20, ' ');
    ReadMsgStringPadding(former, target->mat_id, 20, ' ');
    target->qty_1 = ReadMsgDouble(former);
}

void transform_CUS_Update_PDA_Silsa_input_In_Tag(HTransformer former, CUS_Update_PDA_Silsa_input_In_Tag *target)
{
    int i = 0;
    memset(target, 0x00, sizeof(CUS_Update_PDA_Silsa_input_In_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->work_date, 14, ' ');
    ReadMsgStringPadding(former, target->mat_id, 20, ' ');
    ReadMsgStringPadding(former, target->mat_desc, 50, ' ');
    ReadMsgStringPadding(former, target->lot_id, 20, ' ');
    target->ins_qty = ReadMsgDouble(former);
    target->inv_qty = ReadMsgDouble(former);
    ReadMsgStringPadding(former, target->create_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->create_time, 14, ' ');
    ReadMsgStringPadding(former, target->update_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->update_time, 14, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_1, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_2, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_3, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_4, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_5, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_6, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_7, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_8, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_9, 30, ' ');
    ReadMsgStringPadding(former, target->shp_cmf_10, 30, ' ');
    target->_size_pda_list = ReadMsgInt(former);
    for(i = 0; i < target->_size_pda_list; i++) {
        transform_CUS_Update_PDA_Silsa_input_In_Tag_pda_list(former, &target->pda_list[i]);
    }
}

void transform_CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list(HTransformer former, CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list *target)
{
    memset(target, 0x00, sizeof(CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list));
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
}

void transform_CUS_Update_PDA_Direct_Packing_Label_In_Tag(HTransformer former, CUS_Update_PDA_Direct_Packing_Label_In_Tag *target)
{
    int i = 0;
    memset(target, 0x00, sizeof(CUS_Update_PDA_Direct_Packing_Label_In_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->work_date, 8, ' ');
    ReadMsgStringPadding(former, target->prod_date, 14, ' ');
    ReadMsgStringPadding(former, target->inbox_no, 30, ' ');
    target->inbox_seq = ReadMsgDouble(former);
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
    ReadMsgStringPadding(former, target->label_id, 25, ' ');
    ReadMsgStringPadding(former, target->prod_name, 50, ' ');
    ReadMsgStringPadding(former, target->mat_id, 30, ' ');
    ReadMsgStringPadding(former, target->mat_desc, 50, ' ');
    ReadMsgStringPadding(former, target->mat_type, 20, ' ');
    ReadMsgStringPadding(former, target->pol_type, 30, ' ');
    ReadMsgStringPadding(former, target->lot_id, 25, ' ');
    ReadMsgStringPadding(former, target->cust_mat_id, 30, ' ');
    ReadMsgStringPadding(former, target->cust_mat_desc, 50, ' ');
    ReadMsgStringPadding(former, target->mat_size, 20, ' ');
    target->pack_qty = ReadMsgDouble(former);
    ReadMsgStringPadding(former, target->order_no, 25, ' ');
    ReadMsgStringPadding(former, target->print_time, 14, ' ');
    target->tot_qty = ReadMsgDouble(former);
    target->side_flag = ReadMsgChar(former);
    target->print_cnt = ReadMsgDouble(former);
    target->residue_fg = ReadMsgChar(former);
    target->residue_qty = ReadMsgDouble(former);
    target->add_fg = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->from_to_inbox_no, 30, ' ');
    target->delete_fg = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->create_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->create_time, 14, ' ');
    ReadMsgStringPadding(former, target->update_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->update_time, 14, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_1, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_2, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_3, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_4, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_5, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_6, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_7, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_8, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_9, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_10, 30, ' ');
    target->_size_pda_list = ReadMsgInt(former);
    for(i = 0; i < target->_size_pda_list; i++) {
        transform_CUS_Update_PDA_Direct_Packing_Label_In_Tag_pda_list(former, &target->pda_list[i]);
    }
}

void transform_CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list(HTransformer former, CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list *target)
{
    memset(target, 0x00, sizeof(CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list));
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
}

void transform_CUS_Update_PDA_Optics_Mat_Output_in_Tag(HTransformer former, CUS_Update_PDA_Optics_Mat_Output_in_Tag *target)
{
    int i = 0;
    memset(target, 0x00, sizeof(CUS_Update_PDA_Optics_Mat_Output_in_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->work_date, 8, ' ');
    ReadMsgStringPadding(former, target->prod_date, 14, ' ');
    ReadMsgStringPadding(former, target->outbox_no, 30, ' ');
    target->outbox_seq = ReadMsgDouble(former);
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
    ReadMsgStringPadding(former, target->label_id, 25, ' ');
    ReadMsgStringPadding(former, target->prod_name, 50, ' ');
    ReadMsgStringPadding(former, target->mat_id, 30, ' ');
    ReadMsgStringPadding(former, target->mat_desc, 50, ' ');
    ReadMsgStringPadding(former, target->mat_type, 20, ' ');
    ReadMsgStringPadding(former, target->pol_type, 30, ' ');
    ReadMsgStringPadding(former, target->lot_id, 25, ' ');
    ReadMsgStringPadding(former, target->inbox_no, 30, ' ');
    ReadMsgStringPadding(former, target->customer_id, 25, ' ');
    ReadMsgStringPadding(former, target->customer_desc, 25, ' ');
    ReadMsgStringPadding(former, target->cust_mat_id, 20, ' ');
    ReadMsgStringPadding(former, target->cust_mat_desc, 50, ' ');
    ReadMsgStringPadding(former, target->mat_size, 20, ' ');
    target->pack_qty = ReadMsgDouble(former);
    ReadMsgStringPadding(former, target->avail_time, 14, ' ');
    ReadMsgStringPadding(former, target->order_no, 25, ' ');
    ReadMsgStringPadding(former, target->print_time, 14, ' ');
    target->tot_qty = ReadMsgDouble(former);
    target->print_cnt = ReadMsgDouble(former);
    target->residue_fg = ReadMsgChar(former);
    target->residue_qty = ReadMsgDouble(former);
    target->add_fg = ReadMsgChar(former);
    target->ship_fg = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->ship_time, 14, ' ');
    ReadMsgStringPadding(former, target->from_to_outbox_no, 30, ' ');
    target->delete_fg = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->create_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->create_time, 14, ' ');
    ReadMsgStringPadding(former, target->update_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->update_time, 14, ' ');
    ReadMsgStringPadding(former, target->lot_id_1, 25, ' ');
    ReadMsgStringPadding(former, target->lot_id_2, 25, ' ');
    ReadMsgStringPadding(former, target->lot_id_3, 25, ' ');
    ReadMsgStringPadding(former, target->pol_type_1, 30, ' ');
    ReadMsgStringPadding(former, target->pol_type_2, 30, ' ');
    ReadMsgStringPadding(former, target->pol_type_3, 30, ' ');
    ReadMsgStringPadding(former, target->pol_type_4, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_1, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_2, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_3, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_4, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_5, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_6, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_7, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_8, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_9, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_10, 30, ' ');
    target->_size_pda_list = ReadMsgInt(former);
    for(i = 0; i < target->_size_pda_list; i++) {
        transform_CUS_Update_PDA_Optics_Mat_Output_in_Tag_pda_list(former, &target->pda_list[i]);
    }
}

void transform_CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list(HTransformer former, CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list *target)
{
    memset(target, 0x00, sizeof(CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list));
    ReadMsgStringPadding(former, target->lot_id, 25, ' ');
    ReadMsgStringPadding(former, target->Carraier_id, 25, ' ');
}

void transform_CUS_Update_PDA_Tran_Out_Stock_in_Tag(HTransformer former, CUS_Update_PDA_Tran_Out_Stock_in_Tag *target)
{
    int i = 0;
    memset(target, 0x00, sizeof(CUS_Update_PDA_Tran_Out_Stock_in_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    target->count = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->oper, 10, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_1, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_2, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_3, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_4, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_5, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_6, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_7, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_8, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_9, 30, ' ');
    ReadMsgStringPadding(former, target->lot_cmf_10, 30, ' ');
    target->_size_lot_list = ReadMsgInt(former);
    for(i = 0; i < target->_size_lot_list; i++) {
        transform_CUS_Update_PDA_Tran_Out_Stock_in_Tag_lot_list(former, &target->lot_list[i]);
    }
}

void transform_CUS_View_PDA_Ship_LDP_Label_In_Tag(HTransformer former, CUS_View_PDA_Ship_LDP_Label_In_Tag *target)
{
    memset(target, 0x00, sizeof(CUS_View_PDA_Ship_LDP_Label_In_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
}

void transform_CUS_View_PDA_Ship_LDP_Label_Out_Tag(HTransformer former, CUS_View_PDA_Ship_LDP_Label_Out_Tag *target)
{
    memset(target, 0x00, sizeof(CUS_View_PDA_Ship_LDP_Label_Out_Tag));
    target->h_status_value = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_msg_code, 10, ' ');
    ReadMsgStringPadding(former, target->h_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_field_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_db_err_msg, 200, ' ');
    target->count = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->customer_id, 30, ' ');
    ReadMsgStringPadding(former, target->barcode, 30, ' ');
    ReadMsgStringPadding(former, target->dw_code, 30, ' ');
    target->barcode_seq = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->cust_model_id, 30, ' ');
    ReadMsgStringPadding(former, target->lot_id, 25, ' ');
    target->pack_qty = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->cust_mat_code, 30, ' ');
    ReadMsgStringPadding(former, target->sap_mat_code, 30, ' ');
    ReadMsgStringPadding(former, target->vendor_mat_id, 50, ' ');
    target->lot_qty = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->prod_time, 14, ' ');
    ReadMsgStringPadding(former, target->print_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->print_time, 14, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_1, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_2, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_3, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_4, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_5, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_6, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_7, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_8, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_9, 30, ' ');
    ReadMsgStringPadding(former, target->lbl_cmf_10, 30, ' ');
}

void transform_CUS_View_PDA_GCM_Table_In_Tag(HTransformer former, CUS_View_PDA_GCM_Table_In_Tag *target)
{
    memset(target, 0x00, sizeof(CUS_View_PDA_GCM_Table_In_Tag));
    ReadMsgStringPadding(former, target->h_passport, 100, ' ');
    target->h_language = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_factory, 10, ' ');
    ReadMsgStringPadding(former, target->h_user_id, 20, ' ');
    ReadMsgStringPadding(former, target->h_password, 20, ' ');
    target->h_proc_step = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->factory, 10, ' ');
    ReadMsgStringPadding(former, target->table_name, 20, ' ');
    ReadMsgStringPadding(former, target->key_1, 30, ' ');
    ReadMsgStringPadding(former, target->key_2, 30, ' ');
    ReadMsgStringPadding(former, target->next_key_1, 30, ' ');
    ReadMsgStringPadding(former, target->next_key_2, 30, ' ');
    ReadMsgStringPadding(former, target->next_data_1, 50, ' ');
}

void transform_CUS_View_PDA_GCM_Table_Out_Tag_data_list(HTransformer former, CUS_View_PDA_GCM_Table_Out_Tag_data_list *target)
{
    memset(target, 0x00, sizeof(CUS_View_PDA_GCM_Table_Out_Tag_data_list));
    ReadMsgStringPadding(former, target->key_1, 30, ' ');
    ReadMsgStringPadding(former, target->key_2, 30, ' ');
    ReadMsgStringPadding(former, target->data_1, 50, ' ');
    ReadMsgStringPadding(former, target->data_2, 50, ' ');
    ReadMsgStringPadding(former, target->data_3, 50, ' ');
    ReadMsgStringPadding(former, target->data_4, 50, ' ');
    ReadMsgStringPadding(former, target->data_5, 50, ' ');
    ReadMsgStringPadding(former, target->data_6, 50, ' ');
    ReadMsgStringPadding(former, target->data_7, 50, ' ');
    ReadMsgStringPadding(former, target->data_8, 50, ' ');
    ReadMsgStringPadding(former, target->data_9, 50, ' ');
    ReadMsgStringPadding(former, target->data_10, 50, ' ');
}

void transform_CUS_View_PDA_GCM_Table_Out_Tag(HTransformer former, CUS_View_PDA_GCM_Table_Out_Tag *target)
{
    int i = 0;
    memset(target, 0x00, sizeof(CUS_View_PDA_GCM_Table_Out_Tag));
    target->h_status_value = ReadMsgChar(former);
    ReadMsgStringPadding(former, target->h_msg_code, 10, ' ');
    ReadMsgStringPadding(former, target->h_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_field_msg, 200, ' ');
    ReadMsgStringPadding(former, target->h_db_err_msg, 200, ' ');
    target->count = ReadMsgInt(former);
    ReadMsgStringPadding(former, target->next_key_1, 30, ' ');
    ReadMsgStringPadding(former, target->next_key_2, 30, ' ');
    ReadMsgStringPadding(former, target->next_data_1, 50, ' ');
    target->_size_data_list = ReadMsgInt(former);
    for(i = 0; i < target->_size_data_list; i++) {
        transform_CUS_View_PDA_GCM_Table_Out_Tag_data_list(former, &target->data_list[i]);
    }
}


