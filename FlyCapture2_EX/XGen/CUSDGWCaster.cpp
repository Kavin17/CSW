/*******************************************************************************
' CUSDGWCaster.c
'
' Copyright (c) 2004 by Miracom,Inc.
' All rights reserved.
'
' Generated by XGen 4.0
'
' Created at 
'
' Author : Miracom
' Description : Generated by XGen4.3.0.1
'******************************************************************************/

#ifdef _AFXDLL
#include "stdafx.h"
#endif
#include "CUSDGWCaster.h"
//#include "include/CUSDGWCaster.h"


IOIStatus send_CUSDGW_Send(CUSDGW_Send_In_Tag *source_type, LPTSTR channel, long ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUSDGW_Send")), _T("CUSDGW_Send"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUSDGW_Send_In_Tag(former, source_type);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUSInsp_Lbl(CUSInsp_Lbl_In_Tag *source_type, LPTSTR channel, long ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUSInsp_Lbl")), _T("CUSInsp_Lbl"));
    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUSInsp_Lbl_In_Tag(former, source_type);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUSInsp_Lbl_AIS(CUSInsp_Lbl_In_Tag *source_type, CUSDGW_Cmn_Out_Tag *target_type, LPTSTR channel, long ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUSInsp_Lbl_AIS")), _T("CUSInsp_Lbl_AIS"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUSInsp_Lbl_In_Tag(former, source_type);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep))
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_CUSDGW_Cmn_Out_Tag(former, target_type);
                DestroyTransformer(former);
            }
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUSDGW_SendAuto(CUSDGW_SendAuto_In_Tag *source_type, CUSDGW_Cmn_Out_Tag *target_type, LPTSTR channel, long ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUSDGW_SendAuto")), _T("CUSDGW_SendAuto"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUSDGW_SendAuto_In_Tag(former, source_type);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep))
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_CUSDGW_Cmn_Out_Tag(former, target_type);
                DestroyTransformer(former);
            }
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}

IOIStatus send_CUSDGW_ViewSanpoData(CUSDGW_ViewSanpoData_In_Tag *source_type, CUSDGW_ViewSanpoData_Out_Tag *target_type, LPTSTR channel, long ttl, int mode)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessage rep = Null_Ptr;
    IOIMessage msg = IOIMessageCreate();
    if(Null_Ptr == msg) return IOIGetLastError();

    IOIMessageAddStringInfo(msg, XGEN_TAG_VERSION,   (short)TSTRLEN(XGEN_VERSION), XGEN_VERSION);
    IOIMessageAddStringInfo(msg, XGEN_TAG_MODULE,    (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_INTERFACE, (short)TSTRLEN(_T("CUSCoreDGW")), _T("CUSCoreDGW"));
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTNAME,  (short)TSTRLEN(mioi_hostname), mioi_hostname);
    IOIMessageAddStringInfo(msg, XGEN_TAG_HOSTADDR,  (short)TSTRLEN(mioi_hostaddr), mioi_hostaddr);
    IOIMessageAddStringInfo(msg, XGEN_TAG_OPERATION, (short)TSTRLEN(_T("CUSDGW_ViewSanpoData")), _T("CUSDGW_ViewSanpoData"));

    if(Null_Ptr != msg)
    {
        IxArray a_data;
        HStreamBuffer buffer = CreateStreamByteBuffer(Null_Ptr, IX_BYTE, XGEN_BLOCK_INIT_COUNT, XGEN_BLOCK_INC_COUNT, XGEN_BLOCK_SIZE);
        HOutputStream stream = CreateOutputStream(buffer);
        HTransformer  former = CreateWriteTransformer(stream);
        if(Null_Ptr != former)
        {
            serialize_CUSDGW_ViewSanpoData_In_Tag(former, source_type);
            DestroyTransformer(former);
        }

        DestroyOutputStream(stream);
        a_data = StreamBuffer_GetBytes(buffer);
        IOIMessageSetData(msg, a_data.pval, a_data.cnt); 
        DestroyStreamBuffer(buffer);
        array_destroy(&a_data);

        status = send_message(msg, &rep, channel, ttl, mode, True32);
        if((IOI_SUCCESS == status) && (DT_REQUEST == mode) && (Null_Ptr != rep))
        {
            a_data = IOIMessageGetDataArray(rep);
            former = CreateByteTransformer(&a_data);
            if(Null_Ptr != former)
            {
                transform_CUSDGW_ViewSanpoData_Out_Tag(former, target_type);
                DestroyTransformer(former);
            }
            if(rep) IOIMessageRelease(rep);
        }
    }

    if(msg) IOIMessageRelease(msg);

    return status;
}


