/*******************************************************************************
' h101stub.c
'
' Copyright (c) 2004 by Miracom,Inc.
' All rights reserved.
'
' Generated by XGen 4.0
'
' Created at Wed Apr 16 11:36:50 KST 2008
'
' Author : Miracom
' Description : Generated by XGen4.3.0.3
'******************************************************************************/

//#ifdef _AFXDLL
#include "..\\StdAfx.h"
//#endif
#include "h101stub.h"
//#include "CUSCorePDATuner.h"


XGEN_MODULE_INIT(1)

/* Global variables & Properties **********************************************/
IOISession mioi_session;
char mioi_hostname[128];
char mioi_hostaddr[128];
LPTSTR mioi_hostname_peer;
LPTSTR mioi_hostaddr_peer;

void caster_prologue(IOIMessage msg);
void caster_epilogue(IOIMessage msg, IOIMessage rep, IOIStatus status);
void tuner_prologue (IOIMessage msg);
void tuner_epilogue (IOIMessage msg, IOIMessage rep, IOIStatus status);


/* Stub method ****************************************************************/
IOIStatus init(LPTSTR session_id, int session_mode, LPTSTR connect_string)
{
    if(IOI_SUCCESS != IOIInit(session_id, 10104))//ip, ??
        return IOIGetLastError();
    if(Null_Ptr == (mioi_session = IOISessionCreate(session_id, session_mode)))//ip , mode
        return IOIGetLastError();

    XGEN_CONFIG_REGIST(session_mode);
//    XGEN_MODULE_REGIST(CUSCorePDA);

    return IOISessionConnect(mioi_session, connect_string);
}

void term()
{
    IOISessionDisconnect(mioi_session);
    IOISessionDestroy(mioi_session);
    IOITerm();
}

void tune(LPTSTR channel,   int mode) { set_tune(channel,   mode); }
void untune(LPTSTR channel, int mode) { set_untune(channel, mode); }

IOIStatus send_message(IOIMessage msg, IOIMessage *rep, LPTSTR channel, int ttl, int mode, Bool32 sync)
{
    IOIStatus status = IOI_SUCCESS;
    IOIMessageSetChannel(msg, channel);
    IOIMessageSetTTL(msg, ttl);
    IOIMessageSetDelivery(msg, mode);

    caster_prologue(msg);

    if(DT_REQUEST == mode)
    {
        if(Null_Ptr == (*rep = IOISendRequest(mioi_session, msg)))
            status = IOIGetLastError();
        else
        {
            short size;
            char *pbuf;
            char cabuf[256];
            if(IOI_SUCCESS == IOIMessageGetStringInfo(*rep, XGEN_RESULT_CODE, &size, &pbuf))
            {
                memcpy(cabuf, pbuf, size); cabuf[size] = 0;
                sscanf(cabuf, "%d", &status);
            }
        }
    }
    else if(DT_UNICAST == mode)
        status = IOISendUnicast(mioi_session, msg);
    else if(DT_GUARANTEED_UNICAST == mode)
        status = IOISendGuaranteedUnicast(mioi_session, channel, msg);
    else if(DT_MULTICAST == mode)
        status = IOISendMulticast(mioi_session, msg);
    else if(DT_GUARANTEED_MULTICAST == mode)
        status = IOISendGuaranteedMulticast(mioi_session, channel, msg);

    caster_epilogue(msg, rep, status);
    return status;
}

int send_reply(IOIHandle issuer, IOIMessage req, IOIMessage rep, int err_code, char* err_msg)
{
    char buf_[256];

    sprintf(buf_, "%010d", err_code);
    IOIMessageAddStringInfo(rep, XGEN_RESULT_CODE, (short)strlen(buf_), buf_);
    IOIMessageAddStringInfo(rep, XGEN_RESULT_MSG,  (short)strlen(err_msg), err_msg);

    return IOISendReply(issuer, req, rep);
}

xgen_operation get_operation_from_info(IOIMessage msg)
{
    short infoSize = 0;
    LPTSTR recv_version = (LPTSTR) Null_Ptr, recv_module = (LPTSTR) Null_Ptr, recv_operation = (LPTSTR) Null_Ptr;
    xgen_operation operation = (xgen_operation) Null_Ptr;
    IOIMessage rep = Null_Ptr;

    IOIMessageGetStringInfo(msg, XGEN_TAG_VERSION, &infoSize, &recv_version);
    if((Null_Ptr == recv_version) || (0 != TSTRNCMP(XGEN_VERSION, recv_version, TSTRLEN(XGEN_VERSION))))
    {
        if(DT_REQUEST == (IOIMessageGetDelivery(msg) & 0x000f))
        {
            if(Null_Ptr != (rep = IOIMessageCreateReply(msg)))
            {
                send_reply(mioi_session, msg, rep, XGEN_ERROR_UNEXPECTED_VERSION, "XGEN_ERROR_UNEXPECTED_VERSION");
                if(rep) IOIMessageRelease(rep);
            }
        }
        return (xgen_operation) Null_Ptr;
    }

    IOIMessageGetStringInfo(msg, XGEN_TAG_MODULE, &infoSize, &recv_module);
    if((Null_Ptr == recv_module) || (0 == TSTRLEN(recv_module)))
    {
        IOIMessageGetStringInfo(msg, XGEN_TAG_INTERFACE, &infoSize, &recv_module);
        if((Null_Ptr == recv_module) || (0 == TSTRLEN(recv_module)))
        {
            if(DT_REQUEST == (IOIMessageGetDelivery(msg) & 0x000f))
            {
                if(Null_Ptr != (rep = IOIMessageCreateReply(msg)))
                {
                    send_reply(mioi_session, msg, rep, XGEN_ERROR_UNEXPECTED_MODULE, "XGEN_ERROR_UNEXPECTED_MODULE");
                    if(rep) IOIMessageRelease(rep);
                }
            }
            return (xgen_operation) Null_Ptr;
        }
    }

    IOIMessageGetStringInfo(msg, XGEN_TAG_OPERATION, &infoSize, &recv_operation);
    if((Null_Ptr == recv_operation) || (0 == TSTRLEN(recv_operation)))
    {
        if(DT_REQUEST == (IOIMessageGetDelivery(msg) & 0x000f))
        {
            if(Null_Ptr != (rep = IOIMessageCreateReply(msg)))
            {
                send_reply(mioi_session, msg, rep, XGEN_ERROR_UNEXPECTED_OPERATION, "XGEN_ERROR_UNEXPECTED_OPERATION");
                if(rep) IOIMessageRelease(rep);
            }
        }
    }
    
    return get_operation(recv_module, recv_operation);
}

/* Session Event **************************************************************/
void on_message(IOIHandle issur, IOIMessage msg)
{
    short infoSize = 0;
    xgen_operation operation = get_operation_from_info(msg);
    if(Null_Ptr == operation)
    {
        if(DT_REQUEST == (IOIMessageGetDelivery(msg) & 0x000f))
        {
            IOIMessage rep = IOIMessageCreateReply(msg);
            if(NULL != rep)
            {
                send_reply(mioi_session, msg, rep, XGEN_ERROR_UNEXPECTED_OPERATION, "XGEN_ERROR_UNEXPECTED_OPERATION");
                if(rep) IOIMessageRelease(rep);
            }
        }
        return;
    }

    IOIMessageGetStringInfo(msg, XGEN_TAG_HOSTNAME,  &infoSize, &mioi_hostname_peer);
    IOIMessageGetStringInfo(msg, XGEN_TAG_HOSTADDR,  &infoSize, &mioi_hostaddr_peer);

    tuner_prologue(msg);
    tuner_epilogue(msg, issur, operation(issur, msg));
}

void on_reply(IOIHandle issur, IOIMessage req, IOIMessage rep, void *hint)
{
    /* TODO : User Code */
}

void on_connect(IOIHandle issuer)
{
#ifdef _DEBUG
    TPRINTF("\non connected...");
#endif
}

void on_disconnect(IOIHandle issuer)
{
#ifdef _DEBUG
    TPRINTF("\non disconnect...");
#endif
}

void caster_prologue(IOIMessage req)
{
    /* TODO : User Code */
}

void caster_epilogue(IOIMessage req, IOIMessage rep, IOIStatus status)
{
    /* TODO : User Code */
}

void tuner_prologue(IOIMessage req)
{
    /* TODO : User Code */
}

void tuner_epilogue(IOIMessage req, IOIMessage rep, IOIStatus status)
{
    /* TODO : User Code */
}

/* Util ***********************************************************************/
int get_last_space_pos(LPCTSTR str, int size)
{
    int pos;
   	if((int)strlen(str) < size) size = strlen(str);
    
    for(pos = size - 1; pos >= 0; pos--)
        if(*(str + pos) != ' ') break;
    return pos + 1;
}


