// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cttext.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CctText

IMPLEMENT_DYNCREATE(CctText, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctText properties

BOOL CctText::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CctText::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctText::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CctText::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CctText::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_HANDLE CctText::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctText::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

unsigned long CctText::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CctText::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CctText::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CctText::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

CString CctText::GetFontName()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CctText::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

BOOL CctText::GetFontBold()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetFontBold(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CctText::GetFontItalic()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetFontItalic(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CctText::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CctText::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

float CctText::GetFontSize()
{
	float result;
	GetProperty(0x8, VT_R4, (void*)&result);
	return result;
}

void CctText::SetFontSize(float propVal)
{
	SetProperty(0x8, VT_R4, propVal);
}

long CctText::GetBorderType()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CctText::SetBorderType(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CctText::GetTextPosition()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CctText::SetTextPosition(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CctText::GetPicPosition()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CctText::SetPicPosition(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

short CctText::GetTextAngle()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CctText::SetTextAngle(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

CPicture CctText::GetPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0xd, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctText::SetPicture(LPDISPATCH propVal)
{
	SetProperty(0xd, VT_DISPATCH, propVal);
}

unsigned long CctText::GetShadowColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CctText::SetShadowColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

BOOL CctText::GetSingleLine()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetSingleLine(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

unsigned long CctText::GetThreeDColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CctText::SetThreeDColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

BOOL CctText::GetThreeDText()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetThreeDText(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

unsigned long CctText::GetBorderColor()
{
	unsigned long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CctText::SetBorderColor(unsigned long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CctText::GetAlignment()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CctText::SetAlignment(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

short CctText::GetTextXOffset()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CctText::SetTextXOffset(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

short CctText::GetTextYOffset()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CctText::SetTextYOffset(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

BOOL CctText::GetWordWrap()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetWordWrap(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CctText::GetThinBorder()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CctText::SetThinBorder(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctText operations

void CctText::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
