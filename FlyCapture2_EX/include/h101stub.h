/*******************************************************************************
' h101stub.h
'
' Copyright (c) 2004 by Miracom,Inc.
' All rights reserved.
'
' Generated by XGen 4.0
'
' Created at Wed Apr 16 11:36:50 KST 2008
'
' Author : Miracom
' Description : Generated by XGen4.3.0.3
'******************************************************************************/

#ifndef _XGEN_H101STUB_H
#define _XGEN_H101STUB_H

#if defined(_XOPEN_SOURCE_EXTENDED)
#include <arpa/inet.h>
#endif

#if defined(_HPUX_SOURCE)
#    include <stdio.h>
#    include <stdlib.h>
#    include <netinet/in.h>
#    include <netdb.h>
#elif defined(__sun)
#    include <stdio.h>
#    include <stdlib.h>
#include <netinet/in.h>
#elif defined(WIN32) || defined(_WIN32_WCE)
#    include <stdio.h>
#    include <stdlib.h>
#    include <windows.h>
#    include <winsock.h>
#    include <tchar.h>
#endif

#include "transceiverx.h"

#if defined(_HPUX_SOURCE)
#    define TSTRLEN(s)            strlen(s)
#    define TSTRCPY(s1, s2)       strcpy(s1, s2)
#    define TSTRNCPY(s1, s2, s3)  strncpy(s1, s2, s3)
#    define TSTRSTR(s1, s2)       strstr(s1, s2)
#    define TSTRCHR(s1, c)        strchr(s1, c)
#    define TSTRCMP(s1, s2)       strcmp(s1, s2)
#    define TSTRNCMP(s1, s2, s3)  strncmp(s1, s2, s3)
#    define TOLOWER(c)            tolower(c)
#    define TSTRTOK(s1, s2)       strtok(s1, s2)
#    define TATOI(s)              atoi(s)
#    define TPRINTF               printf
#    define TFPRINTF              fprintf
#    define TSPRINTF              sprintf
#    define TSTRCAT(a, b)         strcat(a, b)
#elif defined(__digital__)
#    define TSTRLEN(s)            strlen(s)
#    define TSTRCPY(s1, s2)       strcpy(s1, s2)
#    define TSTRNCPY(s1,s2,s3)    strncpy(s1,s2,s3)
#    define TSTRSTR(s1, s2)       strstr(s1, s2)
#    define TSTRCHR(s1, c)        strchr(s1, c)
#    define TSTRCMP(s1, s2)       strcmp(s1, s2)
#    define TSTRNCMP(s1,s2,s3)    strncmp(s1, s2, s3)
#    define TOLOWER(c)            tolower(c)
#    define TSTRTOK(s1, s2)       strtok(s1, s2)
#    define TATOI(s)              atoi(s)
#    define TPRINTF               printf
#    define TFPRINTF              fprintf
#    define TSPRINTF              sprintf
#    define TSTRCAT(a, b)         strcat(a, b)
#elif defined(vms)
#    define TSTRLEN(s)            strlen(s)
#    define TSTRCPY(s1, s2)       strcpy(s1, s2)
#    define TSTRNCPY(s1,s2,s3)    strncpy(s1,s2,s3)
#    define TSTRSTR(s1, s2)       strstr(s1, s2)
#    define TSTRCHR(s1, c)        strchr(s1, c)
#    define TSTRCMP(s1, s2)       strcmp(s1, s2)
#    define TSTRNCMP(s1,s2,s3)    strncmp(s1, s2, s3)
#    define TOLOWER(c)            tolower(c)
#    define TSTRTOK(s1, s2)       strtok(s1, s2)
#    define TATOI(s)              atoi(s)
#    define TPRINTF               printf
#    define TFPRINTF              fprintf
#    define TSPRINTF              sprintf
#    define TSTRCAT(a, b)         strcat(a, b)
#elif defined(__sun)
#    define TSTRLEN(s)            strlen(s)
#    define TSTRCPY(s1, s2)       strcpy(s1, s2)
#    define TSTRNCPY(s1,s2,s3)    strncpy(s1,s2,s3)
#    define TSTRSTR(s1, s2)       strstr(s1, s2)
#    define TSTRCHR(s1, c)        strchr(s1, c)
#    define TSTRCMP(s1, s2)       strcmp(s1, s2)
#    define TSTRNCMP(s1,s2,s3)    strncmp(s1, s2, s3)
#    define TOLOWER(c)            tolower(c)
#    define TSTRTOK(s1, s2)       strtok(s1, s2)
#    define TATOI(s)              atoi(s)
#    define TPRINTF               printf
#    define TFPRINTF              fprintf
#    define TSPRINTF              sprintf
#    define TSTRCAT(a, b)         strcat(a, b)
#elif !defined(WIN32) && !defined(_WIN32_WCE)
#    define TSTRLEN(s)            strlen(s)
#    define TSTRCPY(s1, s2)       strcpy(s1, s2)
#    define TSTRNCPY(s1,s2,s3)    strncpy(s1,s2,s3)
#    define TSTRSTR(s1, s2)       strstr(s1, s2)
#    define TSTRCHR(s1, c)        strchr(s1, c)
#    define TSTRCMP(s1, s2)       strcmp(s1, s2)
#    define TSTRNCMP(s1,s2,s3)    strncmp(s1, s2, s3)
#    define TOLOWER(c)            tolower(c)
#    define TSTRTOK(s1, s2)       strtok(s1, s2)
#    define TATOI(s)              atoi(s)
#    define TPRINTF               printf
#    define TFPRINTF              fprintf
#    define TSPRINTF              sprintf
#    define TSTRCAT(a, b)         strcat(a, b)
#else
#    define TSTRLEN(s)            _tcslen(s)
#    define TSTRCPY(s1, s2)       _tcscpy(s1, s2)
#    define TSTRNCPY(s1,s2,s3)    _tcsncpy(s1,s2,s3)
#    define TSTRSTR(s1, s2)       _tcsstr(s1, s2)
#    define TSTRCHR(s1, c)        _tcschr(s1, c)
#    define TSTRCMP(s1, s2)       _tcscmp(s1, s2)
#    define TSTRNCMP(s1,s2,s3)    _tcsncmp(s1, s2, s3)
#    if defined(UNICODE) || defined(_UNICODE)
#        define TOLOWER(c)        towlower(c)
#    else
#        define TOLOWER(c)        tolower(c)
#    endif
#    define TSTRTOK(s1, s2)       _tcstok(s1, s2)
#    define TATOI(s)              _ttoi(s)
#    define TPRINTF               _tprintf
#    define TFPRINTF              _tfprintf
#    define TSPRINTF              _stprintf
#    define TSTRCAT(a, b)         _tcscat(a, b)
#    define strcasecmp(a, b)      (strcmp_icase(a, b))
#    define WCTMB(x,y,z)          WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK,(x),-1,(y),(z),Null_Ptr,Null_Ptr)
#    define MBTWC(x,y,z)          MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED,(x), -1, (y), (z) )
typedef DWORD (WINAPI *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter);
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
#endif /* !defined(WIN32) && !defined(_WIN32_WCE) */

/* Macro - Operation dispatch by module ***************************************/
typedef IOIStatus (*xgen_operation)(IOIHandle session, IOIMessage msg);
typedef struct XGEN_OPERATION
{
    LPCTSTR name;
    xgen_operation operation;
} ;

typedef struct XGEN_MODULE
{
    LPCTSTR name;
    XGEN_OPERATION * operation;
    int operation_count;
} ;

extern XGEN_MODULE xgen_modules[];
extern int xgen_module_index;

#define XGEN_MODULE_INIT(size)\
int xgen_module_index = 0;\
XGEN_MODULE xgen_modules[size];\
xgen_operation get_operation(LPCTSTR module, LPCTSTR operation) {\
    int i, j;\
    TPRINTF("\nget_operation(module=%s, operation=%s)\n", module, operation);\
    for(i = 0; i < xgen_module_index; i++)\
    if(0 == TSTRCMP(xgen_modules[i].name, module))\
    for(j = 0; j < xgen_modules[i].operation_count; j++)\
    if(0 == TSTRCMP(xgen_modules[i].operation[j].name, operation))\
    return xgen_modules[i].operation[j].operation;\
    return NULL;\
}\
void set_tune(LPCTSTR channel, int mode) {\
    if(DT_REQUEST == mode || DT_UNICAST == mode) IOITuneUnicast(mioi_session, channel);\
    else if(DT_MULTICAST == mode) IOITuneMulticast(mioi_session, channel);\
    else if(DT_GUARANTEED_UNICAST == mode) IOITuneGuaranteedUnicast(mioi_session, channel);\
    else if(DT_GUARANTEED_MULTICAST == mode) IOITuneGuaranteedMulticast(mioi_session, channel);\
}\
void set_untune(LPCTSTR channel, int mode) {\
    if(DT_UNICAST == mode || DT_UNICAST == mode) IOIUntuneUnicast(mioi_session, channel);\
    else if(DT_MULTICAST == mode) IOIUntuneMulticast(mioi_session, channel);\
    else if(DT_GUARANTEED_UNICAST == mode) IOIUntuneGuaranteedUnicast(mioi_session, channel);\
    else if(DT_GUARANTEED_MULTICAST == mode) IOIUntuneGuaranteedMulticast(mioi_session, channel);\
}\
void dispatch_message() {\
    while(True32) {\
        IOIMessage msg = IOIGetMessage(mioi_session, XGEN_DEFAULT_GETMESSAGE_INTERVAL);\
        if(Null_Ptr != msg) {\
            on_message(mioi_session, msg);\
            if(msg) IOIMessageRelease(msg);\
        }\
    }\
}\
void XGEN_CONFIG_REGIST(int mode) {\
    gethostname(mioi_hostname, 128);\
    gethostname(mioi_hostaddr, 128);\
    IOISessionSetConnectHandler(mioi_session, on_connect);\
    IOISessionSetDisconnectHandler(mioi_session, on_disconnect);\
    if(SESSION_MODE_DISPATCH_PULL == (mode & SESSION_MODE_DISPATCH_PULL)) {\
        unsigned long dispatch_thread_id;\
        HANDLE *dispatch_thread_handle = (void ** )CreateThread((LPSECURITY_ATTRIBUTES) Null_Ptr, 0, (LPTHREAD_START_ROUTINE) dispatch_message, Null_Ptr, 0, &dispatch_thread_id);\
        TPRINTF("Message dispatch(PULL mode) thread started(id:%d).\n", dispatch_thread_id);\
    } else {\
        IOISessionSetUnicastHandler(mioi_session, on_message);\
        IOISessionSetRequestHandler(mioi_session, on_message);\
        IOISessionSetReplyHandler(mioi_session, on_reply);\
    }\
}

#define XGEN_MODULE_BEGIN_CONTEXT(module) XGEN_OPERATION module##_operations[] = {
#define XGEN_OPERATION_REGIST_CONTEXT(operation) {#operation, recv_##operation},
#define XGEN_MODULE_END_CONTEXT(module) };

#define XGEN_MODULE_REGIST(module) regist##module()
#define XGEN_MODULE_REGIST_CONTEXT(module, count)\
void regist##module() {\
    xgen_modules[xgen_module_index].name = #module;\
    xgen_modules[xgen_module_index].operation = module##_operations;\
    xgen_modules[xgen_module_index].operation_count = count;\
    xgen_module_index++;\
    {int i = 0; for(i = 0; i < count; i++) TPRINTF("[%s][%s]\n", #module, module##_operations[i].name);}\
}


/* Constants ******************************************************************/
#define XGEN_SUCCESS             IOI_SUCCESS
#define XGEN_BLOCK_INIT_COUNT    5
#define XGEN_BLOCK_INC_COUNT     10
#define XGEN_BLOCK_SIZE          500
#define XGEN_DEFAULT_TTL                    60000
#define XGEN_DEFAULT_GETMESSAGE_INTERVAL    60000

#define XGEN_RESULT_CODE        _T("RESULT_CODE")
#define XGEN_RESULT_MSG         _T("RESULT_MSG")
#define XGEN_VERSION            _T("4.0")
#define XGEN_TAG_VERSION        _T("VERSION")
#define XGEN_TAG_MODULE         _T("MODULE")
#define XGEN_TAG_INTERFACE      _T("INTERFACE")
#define XGEN_TAG_OPERATION      _T("OPERATION")
#define XGEN_TAG_HOSTNAME       _T("HOSTNAME")
#define XGEN_TAG_HOSTADDR       _T("HOSTADDR")

#define XGEN_ERROR_UNEXPECTED_VERSION    -0x15
#define XGEN_ERROR_UNEXPECTED_MODULE     -0x16
#define XGEN_ERROR_UNEXPECTED_OPERATION  -0x17

/* Global extern variable *****************************************************/
extern IOISession mioi_session;
extern char mioi_hostname[128];
extern char mioi_hostaddr[128];
extern LPTSTR mioi_hostname_peer;
extern LPTSTR mioi_hostaddr_peer;


/* Stub method ****************************************************************/
extern IOIStatus init(LPTSTR session_id, int session_mode, LPTSTR connect_string);
extern void term();
extern void tune(LPTSTR channel, int mode);
extern void untune(LPTSTR channel, int mode);

extern void on_connect(IOIHandle issuer);
extern void on_disconnect(IOIHandle issuer);
extern void on_message(IOIHandle issuer, IOIMessage msg);
extern void on_reply(IOIHandle issuer, IOIMessage req, IOIMessage rep, void *hint);

extern IOIStatus send_message(IOIMessage msg, IOIMessage *rep, LPTSTR channel, int ttl, int mode, Bool32 sync);
extern IOIStatus send_reply(IOIHandle issuer, IOIMessage req, IOIMessage rep, int err_code, char* err_msg);

extern void dispatch_message();

extern int get_last_space_pos(LPCTSTR str, int size);

#endif /* _XGEN_H101STUB_H */

